name: CI/CD

on:
  push:
    branches:
      - main
      - 'feature*'
  pull_request:
    branches:
      - main
      - 'feature*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-path: ./build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create build directory and build the project
        run: |
          mkdir -p build
          echo "This is a build artifact" > build/movie-phobics-backend.zip

      - name: List build directory
        run: ls -al ./build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./build/

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Dev
        run: echo "Deploying to Dev environment..."
        env:
          ENVIRONMENT: dev

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    environment: prod
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: echo "Deploying to Production environment..."
        env:
          ENVIRONMENT: prod
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
  
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
  
      - name: Deploy to Netlify
        run: |
            netlify deploy --prod --dir=.netlify/functions --site=$NETLIFY_SITE_ID
        env:
            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            new_tag="v1.0.0"
          else
            version=$(echo "$latest_tag" | sed 's/v//')
            IFS='.' read -r major minor patch <<< "$version"
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          fi
          echo "New tag: $new_tag"
          echo "TAG_VERSION=$new_tag" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        id: create_tag
        run: |
          git tag $TAG_VERSION
          git push origin $TAG_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          release_name: ${{ env.TAG_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure Build Artifact Exists
        id: ensure_artifact
        run: |
          if [ ! -f ./build/movie-phobics-backend.zip ]; then
            mkdir -p ./build
            echo "This is a build artifact" > ./build/movie-phobics-backend.zip
          fi

      - name: List build directory before upload
        run: ls -al ./build

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/movie-phobics-backend.zip
          asset_name: movie-phobics-backend.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
